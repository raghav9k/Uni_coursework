
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  00000196  0000022a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000196  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080020a  0080020a  00000234  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d4d  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c48  00000000  00000000  00001019  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000379  00000000  00000000  00001c61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058e  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000006c  00000000  00000000  0000259e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000260a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e9       	ldi	r30, 0x96	; 150
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 30       	cpi	r26, 0x0A	; 10
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	aa e0       	ldi	r26, 0x0A	; 10
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 30       	cpi	r26, 0x0C	; 12
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	30 d0       	rcall	.+96     	; 0x180 <main>
 120:	38 c0       	rjmp	.+112    	; 0x192 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <set_led>:
	   4: Pin 46 (Port L bit 3)
	   5: Pin 44 (Port L bit 5)
	   6: Pin 42 (Port L bit 7)
*/
void set_led(int i){
	int count = 1;
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	30 e0       	ldi	r19, 0x00	; 0
		if((i ==0) || ( i == 1)){
			PORTL = 0x00;
			PORTB = portb_values[i];
		}
		else{
			PORTL = portb_values[i];
 128:	ab e0       	ldi	r26, 0x0B	; 11
 12a:	b1 e0       	ldi	r27, 0x01	; 1
			PORTB = 0x00;
		}
		if(i == 5){
			count = -1;
 12c:	cf ef       	ldi	r28, 0xFF	; 255
 12e:	7f ef       	ldi	r23, 0xFF	; 255
		}
		if(i == 0){
		count = 1;}
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	50 e0       	ldi	r21, 0x00	; 0
	   6: Pin 42 (Port L bit 7)
*/
void set_led(int i){
	int count = 1;
	while(1){
		if((i ==0) || ( i == 1)){
 134:	82 30       	cpi	r24, 0x02	; 2
 136:	91 05       	cpc	r25, r1
 138:	38 f4       	brcc	.+14     	; 0x148 <set_led+0x24>
			PORTL = 0x00;
 13a:	1c 92       	st	X, r1
			PORTB = portb_values[i];
 13c:	fc 01       	movw	r30, r24
 13e:	e0 50       	subi	r30, 0x00	; 0
 140:	fe 4f       	sbci	r31, 0xFE	; 254
 142:	40 81       	ld	r20, Z
 144:	45 b9       	out	0x05, r20	; 5
 146:	06 c0       	rjmp	.+12     	; 0x154 <set_led+0x30>
		}
		else{
			PORTL = portb_values[i];
 148:	fc 01       	movw	r30, r24
 14a:	e0 50       	subi	r30, 0x00	; 0
 14c:	fe 4f       	sbci	r31, 0xFE	; 254
 14e:	40 81       	ld	r20, Z
 150:	4c 93       	st	X, r20
			PORTB = 0x00;
 152:	15 b8       	out	0x05, r1	; 5
		}
		if(i == 5){
 154:	85 30       	cpi	r24, 0x05	; 5
 156:	91 05       	cpc	r25, r1
 158:	29 f0       	breq	.+10     	; 0x164 <set_led+0x40>
			count = -1;
		}
		if(i == 0){
 15a:	00 97       	sbiw	r24, 0x00	; 0
 15c:	29 f4       	brne	.+10     	; 0x168 <set_led+0x44>
		count = 1;}
 15e:	26 2f       	mov	r18, r22
 160:	35 2f       	mov	r19, r21
 162:	02 c0       	rjmp	.+4      	; 0x168 <set_led+0x44>
		else{
			PORTL = portb_values[i];
			PORTB = 0x00;
		}
		if(i == 5){
			count = -1;
 164:	2c 2f       	mov	r18, r28
 166:	37 2f       	mov	r19, r23
		}
		if(i == 0){
		count = 1;}
		i = i + count;
 168:	82 0f       	add	r24, r18
 16a:	93 1f       	adc	r25, r19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	4f ef       	ldi	r20, 0xFF	; 255
 16e:	e3 ed       	ldi	r30, 0xD3	; 211
 170:	f0 e3       	ldi	r31, 0x30	; 48
 172:	41 50       	subi	r20, 0x01	; 1
 174:	e0 40       	sbci	r30, 0x00	; 0
 176:	f0 40       	sbci	r31, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <set_led+0x4e>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <set_led+0x58>
 17c:	00 00       	nop
 17e:	da cf       	rjmp	.-76     	; 0x134 <set_led+0x10>

00000180 <main>:
		}
}

int main(){

	DDRL = 0xff;
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
	DDRB = 0xff;
 186:	84 b9       	out	0x04, r24	; 4


	set_led(step);
 188:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end>
 18c:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <__data_end+0x1>
 190:	c9 df       	rcall	.-110    	; 0x124 <set_led>

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
